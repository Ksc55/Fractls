// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NFTCreated extends ethereum.Event {
  get params(): NFTCreated__Params {
    return new NFTCreated__Params(this);
  }
}

export class NFTCreated__Params {
  _event: NFTCreated;

  constructor(event: NFTCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get partIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class PartURIUpdated extends ethereum.Event {
  get params(): PartURIUpdated__Params {
    return new PartURIUpdated__Params(this);
  }
}

export class PartURIUpdated__Params {
  _event: PartURIUpdated;

  constructor(event: PartURIUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get partId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newURI(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class WinnerRewarded extends ethereum.Event {
  get params(): WinnerRewarded__Params {
    return new WinnerRewarded__Params(this);
  }
}

export class WinnerRewarded__Params {
  _event: WinnerRewarded;

  constructor(event: WinnerRewarded) {
    this._event = event;
  }

  get winner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NFTMarketplace__allNFTsResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }
}

export class NFTMarketplace__getAllNFTsResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get partIds(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get owner(): Address {
    return this[2].toAddress();
  }
}

export class NFTMarketplace__getListNFTResult {
  value0: BigInt;
  value1: Array<BigInt>;
  value2: Address;

  constructor(value0: BigInt, value1: Array<BigInt>, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }

  getValue2(): Address {
    return this.value2;
  }
}

export class NFTMarketplace__getPartURIResultValue0Struct extends ethereum.Tuple {
  get id(): BigInt {
    return this[0].toBigInt();
  }

  get url(): string {
    return this[1].toString();
  }
}

export class NFTMarketplace__ownerNFTResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getOwner(): Address {
    return this.value1;
  }
}

export class NFTMarketplace__partsResult {
  value0: BigInt;
  value1: string;

  constructor(value0: BigInt, value1: string) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    return map;
  }

  getId(): BigInt {
    return this.value0;
  }

  getUrl(): string {
    return this.value1;
  }
}

export class NFTMarketplace extends ethereum.SmartContract {
  static bind(address: Address): NFTMarketplace {
    return new NFTMarketplace("NFTMarketplace", address);
  }

  allNFTs(param0: BigInt): NFTMarketplace__allNFTsResult {
    let result = super.call("allNFTs", "allNFTs(uint256):(uint256,address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new NFTMarketplace__allNFTsResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_allNFTs(
    param0: BigInt
  ): ethereum.CallResult<NFTMarketplace__allNFTsResult> {
    let result = super.tryCall(
      "allNFTs",
      "allNFTs(uint256):(uint256,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarketplace__allNFTsResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  checkWinner(_tokenId: BigInt): Address {
    let result = super.call("checkWinner", "checkWinner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_checkWinner(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "checkWinner",
      "checkWinner(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  extractValues(bigNumber: BigInt): Array<BigInt> {
    let result = super.call(
      "extractValues",
      "extractValues(uint256):(uint256[18])",
      [ethereum.Value.fromUnsignedBigInt(bigNumber)]
    );

    return result[0].toBigIntArray();
  }

  try_extractValues(bigNumber: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "extractValues",
      "extractValues(uint256):(uint256[18])",
      [ethereum.Value.fromUnsignedBigInt(bigNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getAllNFTs(): Array<NFTMarketplace__getAllNFTsResultValue0Struct> {
    let result = super.call(
      "getAllNFTs",
      "getAllNFTs():((uint256,uint256[],address)[])",
      []
    );

    return result[0].toTupleArray<
      NFTMarketplace__getAllNFTsResultValue0Struct
    >();
  }

  try_getAllNFTs(): ethereum.CallResult<
    Array<NFTMarketplace__getAllNFTsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getAllNFTs",
      "getAllNFTs():((uint256,uint256[],address)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<NFTMarketplace__getAllNFTsResultValue0Struct>()
    );
  }

  getListNFT(): NFTMarketplace__getListNFTResult {
    let result = super.call(
      "getListNFT",
      "getListNFT():(uint256,uint256[],address)",
      []
    );

    return new NFTMarketplace__getListNFTResult(
      result[0].toBigInt(),
      result[1].toBigIntArray(),
      result[2].toAddress()
    );
  }

  try_getListNFT(): ethereum.CallResult<NFTMarketplace__getListNFTResult> {
    let result = super.tryCall(
      "getListNFT",
      "getListNFT():(uint256,uint256[],address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarketplace__getListNFTResult(
        value[0].toBigInt(),
        value[1].toBigIntArray(),
        value[2].toAddress()
      )
    );
  }

  getPartURI(
    tokenId: BigInt,
    partId: BigInt
  ): NFTMarketplace__getPartURIResultValue0Struct {
    let result = super.call(
      "getPartURI",
      "getPartURI(uint256,uint256):((uint256,string))",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(partId)
      ]
    );

    return changetype<NFTMarketplace__getPartURIResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getPartURI(
    tokenId: BigInt,
    partId: BigInt
  ): ethereum.CallResult<NFTMarketplace__getPartURIResultValue0Struct> {
    let result = super.tryCall(
      "getPartURI",
      "getPartURI(uint256,uint256):((uint256,string))",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(partId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<NFTMarketplace__getPartURIResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  ownerNFT(param0: Address): NFTMarketplace__ownerNFTResult {
    let result = super.call("ownerNFT", "ownerNFT(address):(uint256,address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new NFTMarketplace__ownerNFTResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_ownerNFT(
    param0: Address
  ): ethereum.CallResult<NFTMarketplace__ownerNFTResult> {
    let result = super.tryCall(
      "ownerNFT",
      "ownerNFT(address):(uint256,address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarketplace__ownerNFTResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  parts(param0: BigInt, param1: BigInt): NFTMarketplace__partsResult {
    let result = super.call(
      "parts",
      "parts(uint256,uint256):(uint256,string)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new NFTMarketplace__partsResult(
      result[0].toBigInt(),
      result[1].toString()
    );
  }

  try_parts(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<NFTMarketplace__partsResult> {
    let result = super.tryCall(
      "parts",
      "parts(uint256,uint256):(uint256,string)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTMarketplace__partsResult(value[0].toBigInt(), value[1].toString())
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CheckPartsCall extends ethereum.Call {
  get inputs(): CheckPartsCall__Inputs {
    return new CheckPartsCall__Inputs(this);
  }

  get outputs(): CheckPartsCall__Outputs {
    return new CheckPartsCall__Outputs(this);
  }
}

export class CheckPartsCall__Inputs {
  _call: CheckPartsCall;

  constructor(call: CheckPartsCall) {
    this._call = call;
  }

  get _numbers(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CheckPartsCall__Outputs {
  _call: CheckPartsCall;

  constructor(call: CheckPartsCall) {
    this._call = call;
  }
}

export class CreateNFTCall extends ethereum.Call {
  get inputs(): CreateNFTCall__Inputs {
    return new CreateNFTCall__Inputs(this);
  }

  get outputs(): CreateNFTCall__Outputs {
    return new CreateNFTCall__Outputs(this);
  }
}

export class CreateNFTCall__Inputs {
  _call: CreateNFTCall;

  constructor(call: CreateNFTCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get tokenURIs(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class CreateNFTCall__Outputs {
  _call: CreateNFTCall;

  constructor(call: CreateNFTCall) {
    this._call = call;
  }
}
